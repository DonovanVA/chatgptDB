ChatGPT is a revolutionary NLP model trainied by OpenAI, it is able to act as a highly accurate knowledge base despite it being conversative
in nature, while it is highly accurate, it sees its adoption in even every day consumers. Even tech companies are using its model to retrieve information that is
normally difficult to find on the internet


Over here we are implementing a ChatGPT-powered Database, the results are never consistent for each question, and after multiple testing, here are the possible outputs as shown:

Example question: could you give me the general nutritional content for cooked chinese sausage per 100g? List me the exact calories, protein, carbohydrates and fat in g, if possible, in bullet point form

Example Responses:

(1). Exact
The nutritional content of cooked Chinese sausage per 100g is:

Calories: 388 kcal
Protein: 16.1 g
Carbohydrates: 1.8 g
Fat: 35.6 g

(2). Range
//
Here is the approximate nutritional content of cooked Char Kway Teow per 100g:

- Calories: 300-400 kcal
- Protein: 10-15 g
- Carbohydrates: 30-40 g
- Fat: 15-20 g
//


Please note that these values are estimates and may vary based on the recipe and serving size. It's always best to check with a registered dietitian or use a nutrition calculator to get an accurate nutritional analysis of your meals.

(3). 1 filler word after the keyword 

//
Unfortunately, as an AI language model, I cannot provide you with an exact nutritional content for cooked char kway teow per 100g as ingredients and cooking methods can vary. However, in general, char kway teow is a high-calorie food made with stir-fried flat rice noodles, soy sauce, vegetables, seafood or meat, and eggs. It is often cooked in oil, which adds to its fat content. Here are some estimated nutritional values for char kway teow:

- Calories: around 400-600 kcal per 100g
- Protein: around 10-15g per 100g
- Carbohydrates: around 40-60g per 100g
- Fats: around 20-30g per 100g
//




//Notes:
parseFloat() will return NaN if it the value in it does not start with a number
eg: isNaN(parseFloat("dwdwdw")) && console.log(parseFloat("dwdwdwd")); => NaN



/* Your task:
Implement 2 functions to resolve (2) and (3)
 - checkPostFix(pos,inputString) => checks the string after pos (pos is where the keyword starts), to see if there is a filler word (eg:around, approximately), then a value (0~1000) after that.
If there is, then return a value equals to the length of that filler word, 
else return 0

 - (2): filterValueString(inputString) => checks if the input string is a range or a value, if it is a range, then return the average, else return the exact value

/